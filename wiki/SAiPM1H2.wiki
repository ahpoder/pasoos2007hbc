Page for Hand-in 2 of the Software Architecture in Practice course at AU.

= Introduction =

Brainstorming, decentralized rantings in general.

= Details =

  * General progress
  * Step by step advancements
  * Takes care of "meetings" in our decentralized setting.

= Stakeholders and interests =

  * User (homeowner)
    * Easy to use and configure
    * Always available
    * Safe (will not make an error and burn down the house)
    * Secure (other people cannot control my home)
  * Producer
    * Cheap
    * Production line (modifiability for other uses)
  * Technical installer
    * Easily deployable (installable)
  * Developer
    * Easily adjustable to new requirements
    * Scalable
    * Remote update (upgrading online)
    * Remote maintenance (debugging online)
    * Automatically testable (regression test)
    * Developing in parallel
  * Insurance company
    * Safe with respect to fires (radiators) and break ins (door), ...

= Scenario Brainstorming =

  # A sensor stops responding.
  # Someone leaves a window open in an ice storm, and the sensors makes the actuators overheat.
  # Someone accidentally puts their stiletto through the Ethernet switch, disabling networking parts of the system.
  # After an average user has used the system for less than one hour e or she has mastered the basic functionality
  # The user adds a new actuator and the system configures to use the new hardware automatically within 1 minute.
  # The user logs on externally through the gateway and has access to the home control within 5 second of verifying 98,9% of the time (30 seconds 1% of the time, more than 30 seconds (unscheduled down-time) less than 0,1%) is connected and has access
  # The user attempts to turn radiator above normal safety-level from outside the house and receive an error back explaining the infraction. The system stores a log of the episode and refuse to execute the command.
  #  An attacker attempts to log on using an invalid password and is thrown off. The next attempt will take longer (progressive log-on time). The system stores a log of the failed attempt.
  # Developer updates and tests the code base with a new device type in 1 week.
  # A technical installer installs a system at a customer in no more than 4 hours.
  # Developer updates the code base to a new requirement in less than 30 man-hours
  # Configuration manager installs an upgrade remotely at a customer in no more than 30min
  # Tester/debugger extract debugging information directly from running system at customer.
  # The system handles 50 sensors and 50 actuators.
  # The system handles up to 50 rooms/groups with one or more sensors and actuators in each group.
  # The user changes the preferred temperature from a web page and the system adapts to it.
  # The customer requests that the system runs on other hardware (e.g. less power consuming hardware).
  # The customer requests that the system interfaces with other sensors/actuators?
  # The developer modifies the sensor poll interval at build time.
  # The system turns off all actuators when sensors cannot be probed.
  # The end user adds a sensor/actuator at runtime which registers automatically.

== Identical scenarios ==

Due to the distributed location of the participants in the brainstorming multiple "similar" scenarios was created. In order to avoid having the same scenario represented twice with a slightly different wording, the below list show the scenarios which will be considered identical, meaning that their votes will be accumulated.

  * 2. and 7.
  * 6. and 16.
  * 10. and 17.
  * 9., 11. and 18.
  * 1. and 20.
  * 5. and 21.

= The vote =

== Round 1 ==

|| *Person* ||  *Role*  || *Vote 1* || *Vote 2* || *Vote 3* || *Vote 4* || *Vote 5* || *Vote 6* ||
|| Jesper   ||  User    ||     4    ||    5     ||   6/16   ||    20    ||    21    ||   2/7    ||
|| Lars     || Developer||    19    ||   19     ||   5/21   || 9/11/18  || 9/11/18  ||         13    ||
|| Anders   || Producer ||   2/7    || 9/11/18  ||  9/11/18 ||    12    ||    10/17    ||  10/17 ||

== Round 2 ==

|| *Person* ||  *Role*  || *Vote 1* || *Vote 2* || *Vote 3* || *Vote 4* || *Vote 5* || *Vote 6* ||
|| Jesper   || Developer || 9/11/18 ||   19    ||  9/11/18   || 9/11/18   ||    13      ||      6/16   ||
|| Lars     || User      ||   1/20   ||    4     ||   6/16   ||    15    ||     4    ||   5/21   ||
|| Anders   || Producer || 9/11/18  ||   6/16   ||  5/21  ||    12    ||  5/21   || 10/17  ||

== Vote overview ==

This is the result of the vote in a prioritized order.

  # 9/11/18  (8 votes)
  # 5/21  (6 votes)
  # 6/16  (4 votes)
  # 19    (3 votes)
  # 4     (3 votes)
  # 10/17 (3 votes)
  # 13    (2 votes)
  # 1/20  (2 votes)
  # 2/7   (2 votes)
  # 12    (2 votes)
  # 15    (1 votes)
  # 3     (0 votes)
  # 8     (0 votes)
  # 14    (0 votes)

= Overview of quality-attributes as they relates to HS07 =

  == Availability ==
  * As the HS07 relay on distributed components receiving and transmitting information, as well as remote user access over unreliable communication media outside of the systems control, availability has a high priority.
  * Timely availability
    * Hard requirements as to timeing of responses from the individual services are not that important in the HS07 system. Whether an actuator responds in 1 second or 5 seconds is not that important, just like the internet link in the gateway will not sease to function if its response time is e.g. doubled.

  == Usability ==
  * The HS07 system must be used by "ordinary" users (e.g. non-technical), and a high degree of usability must therefore be inherent in the architecture to support rapid user interface modification as well as implementing functionality that may aid the user during use. 
	  
  == Performance ==
  * Performance and availability are related in the sense that increasing performance may increase timely availability, yet as the timely availability was deemed of low priority, this part of the performance quality attirbute is also of little importance.
  * Another part of performance is related to footprint and memory usage rather than execution speed, and as the system is based on smaller sensors and actuators, this part of performance becomes very important. It is also related to another important quality; cost.
  * The system must be able to handle enough sensors and actuators to control a full house.
	
  == Modifiability ==
  * As the system is based on dynamically replacable sensors and actuators of varying type and specification, it is imparative that the architecture supports these varying specification, and modifiability therefore become vital for the system.
	
  == Security ==
  * There are always at least two levels to security; percieved security and actual security. As long as the sensors and actuators are controlling non-vital functions, e.g. heating, lights, etc. it may be sufficient with perceived security as an attacker may not endanger safety and have no financial motive. On the other hand if the system is extended to control door-locks and house survailance, then actual security becomes a must. Perceived security is important to dissuade the fun-time intruders and reassure the customer.
  
  == Testability ==
  * As the system is highly modifiable, regression-testing is highly-important. Also the requirement of availability creates extra demands on testability, as it is required to test many fault scenarios to ensure propper recovery (if this is the fault-handling mechanism of choice).

(JDA: Der er vel ikke en 1-1 afhængighed imellem modifiablity og testability? - man kan måske sige at hvis systemet er higly modified, så kan der være en sammenhæng imellem behovet for tests og koden. Noget andet er tests kontra testbarhed. Der er vel igen der er i tvivl om at ethvert system bør hvad et sæt af tests, men at designe for testbarhed er i min opfattelse noget andet. Hvis der altid var afhængigheder imellem Testability og Modifiability, så ville det være svært at have den ene uden den anden, hvorved behovet for begge ville opløses og Testability ville blive en sub-bullit til Modifiability)
 

Scenario 6/16:

== Availability == 

 * As the user may experience non-responsiveness 0,1% of the time it is believed that this can be done with a single hardware unit (no HW-redundancy). At the same time the requirement of 30 seconds 1% of the time is sufficient time to restart the web-service, and it is believed sufficient to have _passive redundancy_. Finally it is believed that an availability of 5 seconds 98,9% of the times, require a form of redundancy, _passive redundancy_ is chosen.


----

= Stored for later use =

  # The user -> begin using -> the system (normal operation) -> understand basic functionality -> less than 1 hour.
  # The user -> create a new user -> the system (configuration mode) -> new user ready to log on -> System scales to 65536 users or as hardware allow
  # The home owner -> logs on to -> the system (normal operation) -> creates a connection and reports status -> Maximum delay before response 1 second 95% of the time, 5 seconds 4% of the time, more than 5 seconds (unscheduled down-time) less than 1% of the time.
  # The user -> attempts to turn radiator above normal safety-level from outside the house -> the system (normal operation) -> reports an error back to the user explaining the infraction and create a log entry -> the system do not execute illegal command.
  # An attacker -> attempts to log on -> the system (normal operation) -> system creates audit-trail, disconnects and go to degraded mode for 1 hour -> System do not allow IP to reattempt for 1 hour
  # The developer -> Wishes to add a new device type -> Code (at design time) -> Modification made and tested (incl. regression) -> 1 day.
  # The technician -> Going to install the system -> house and system (pre-initialization) -> System installed and running -> no more than 4 hours
  # The developer -> Needs to modify to new requirement -> Code (post design time) -> Code updated and regression test run -> less than 30 man-hours
  # The developer -> Needs to upgrade the system -> System (maintenance operation) -> New upgrade installed and running -> No more than 30 minutes
  # The developer -> Needs to do debug a problem -> System (maintenance operation) -> Download debug log and allow maintenance access -> 90% of all reported problems leave system in maintenance mode (as opposed to dead)